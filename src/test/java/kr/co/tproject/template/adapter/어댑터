어댑터

#개요
클래스의 인터페이스를 클라이언트가 기대하는 다른 인터페이스로 변환합니다. 
어댑터를 사용하면 호환되지 않는 인터페이스로 인해 할 수 없었던 클래스가 함께 작동할 수 있습니다.


#실제사례
메모리 카드에 사진이 몇 개 있고 이를 컴퓨터로 전송해야 한다고 생각하십시오. 
그것들을 전송하려면 메모리 카드를 컴퓨터에 연결할 수 있도록 컴퓨터 포트와 호환되는 일종의 어댑터가 필요합니다. 
이 경우 카드 리더는 어댑터입니다. 
또 다른 예로는 유명한 전원 어댑터가 있습니다. 
세 다리 플러그는 두 갈래 콘센트에 연결할 수 없으며 두 갈래 콘센트와 호환되는 전원 어댑터를 사용해야 합니다. 
또 다른 예는 한 사람이 말한 단어를 다른 사람에게 번역하는 번역가입니다.


#한줄설명
어댑터 패턴을 사용하면 호환되지 않는 개체를 어댑터에 래핑하여 다른 클래스와 호환되도록 할 수 있습니다.


#위키피디아
소프트웨어 엔지니어링에서 어댑터 패턴은 기존 클래스의 인터페이스를 다른 인터페이스로 사용할 수 있도록 하는 소프트웨어 디자인 패턴입니다. 
소스 코드를 수정하지 않고 기존 클래스가 다른 클래스와 함께 작동하도록 하는 데 자주 사용됩니다.


#적용가능성
기존 클래스를 사용하려고 하는데 해당 인터페이스가 필요한 인터페이스와 일치하지 않습니다.
관련이 없거나 예상치 못한 클래스, 즉 호환 가능한 인터페이스가 반드시 필요하지 않은 클래스와 협력하는 재사용 가능한 클래스를 만들고 싶습니다.
기존의 여러 하위 클래스를 사용해야 하지만 모든 사람을 하위 클래스로 분류하여 인터페이스를 조정하는 것은 비현실적입니다. 
개체 어댑터는 상위 클래스의 인터페이스를 조정할 수 있습니다.
타사 라이브러리를 사용하는 대부분의 애플리케이션은 애플리케이션과 타사 라이브러리 사이의 중간 계층으로 어댑터를 사용하여 
애플리케이션을 라이브러리에서 분리합니다. 
다른 라이브러리를 사용해야 하는 경우 애플리케이션 코드를 변경할 필요 없이 새 라이브러리용 어댑터만 있으면 됩니다.