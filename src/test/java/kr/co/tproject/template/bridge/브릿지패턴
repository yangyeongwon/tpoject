## 개요
	두 가지가 독립적으로 다를 수 있도록 구현에서 추상화를 분리합니다.


## 설명
	다른 마법 부여가 있는 무기가 있고 다른 마법 부여가 있는 다른 무기를 혼합할 수 있다고 가정합니다. 
	어떻게 하시겠습니까? 
	각 마법에 대해 각 무기의 여러 복사본을 만들거나 별도의 마법을 만들어 필요에 따라 무기에 설정할 수 있습니까? 
	브리지 패턴을 사용하면 두 번째 작업을 수행할 수 있습니다.
	
	브리지 패턴은 상속보다 구성을 선호하는 것입니다. 
	구현 세부 정보는 계층에서 별도의 계층이 있는 다른 개체로 푸시됩니다.
	
	브리지 패턴은 "두 가지가 독립적으로 변할 수 있도록 구현에서 추상화를 분리"하기 위한 
	소프트웨어 엔지니어링에서 사용되는 디자인 패턴입니다.


## 적용가능성
	다음과 같은 경우 브리지 패턴을 사용합니다.

 	1) 추상화와 구현 간의 영구적인 바인딩을 피하고 싶습니다. 
 		예를 들어 런타임에 구현을 선택하거나 전환해야 하는 경우일 수 있습니다.
 
 	2) 추상화와 구현 모두 서브클래싱을 통해 확장 가능해야 합니다. 
 		이 경우 Bridge 패턴을 사용하면 다양한 추상화 및 구현을 결합하고 독립적으로 확장할 수 있습니다.
 
 	3) 추상화 구현의 변경 사항은 클라이언트에 영향을 미치지 않아야 합니다. 즉, 코드를 다시 컴파일할 필요가 없습니다.
 
 	4) 당신은 클래스의 확산이 있습니다. 이러한 클래스 계층 구조는 개체를 두 부분으로 분할해야 할 필요성을 나타냅니다. 
 		Rumbaugh는 "중첩 일반화"라는 용어를 사용하여 이러한 클래스 계층 구조를 나타냅니다.
 
 	5) (아마도 참조 카운팅을 사용하여) 여러 객체 간에 구현을 공유하고 이 사실을 클라이언트에서 숨겨야 합니다. 
 		간단한 예는 여러 객체가 동일한 문자열 표현을 공유할 수 있는 Coplien의 String 클래스입니다.